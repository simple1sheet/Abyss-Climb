import {
  pgTable,
  text,
  varchar,
  timestamp,
  jsonb,
  index,
  serial,
  integer,
  boolean,
  real,
  decimal,
  primaryKey,
} from "drizzle-orm/pg-core";
import { createInsertSchema } from "drizzle-zod";
import { z } from "zod";
import { relations } from "drizzle-orm";

// Session storage table (mandatory for Replit Auth)
export const sessions = pgTable(
  "sessions",
  {
    sid: varchar("sid").primaryKey(),
    sess: jsonb("sess").notNull(),
    expire: timestamp("expire").notNull(),
  },
  (table) => [index("IDX_session_expire").on(table.expire)],
);

// User storage table (mandatory for Replit Auth)
export const users = pgTable("users", {
  id: varchar("id").primaryKey().notNull(),
  email: varchar("email").unique(),
  firstName: varchar("first_name"),
  lastName: varchar("last_name"),
  profileImageUrl: varchar("profile_image_url"),
  // Climbing specific fields
  currentLayer: integer("current_layer").default(1),
  whistleLevel: integer("whistle_level").default(1),
  totalXP: integer("total_xp").default(0),
  preferredGradeSystem: varchar("preferred_grade_system").default("V-Scale"),
  createdAt: timestamp("created_at").defaultNow(),
  updatedAt: timestamp("updated_at").defaultNow(),
});

// Climbing sessions
export const climbingSessions = pgTable("climbing_sessions", {
  id: serial("id").primaryKey(),
  userId: varchar("user_id").references(() => users.id).notNull(),
  sessionType: varchar("session_type").notNull(), // 'indoor', 'outdoor'
  location: varchar("location"),
  startTime: timestamp("start_time").notNull(),
  endTime: timestamp("end_time"),
  pausedAt: timestamp("paused_at"), // When session was paused
  resumedAt: timestamp("resumed_at"), // When session was resumed
  totalPausedTime: integer("total_paused_time").default(0), // Total time paused in minutes
  duration: integer("duration"), // in minutes
  notes: text("notes"),
  xpEarned: integer("xp_earned").default(0),
  status: varchar("status").default("active"), // active, paused, completed
  createdAt: timestamp("created_at").defaultNow(),
});

// Individual boulder problems in sessions
export const boulderProblems = pgTable("boulder_problems", {
  id: serial("id").primaryKey(),
  sessionId: integer("session_id").references(() => climbingSessions.id).notNull(),
  grade: varchar("grade").notNull(), // V0, V1, etc.
  gradeSystem: varchar("grade_system").default("V-Scale"), // V-Scale, Font, German
  style: varchar("style"), // crimps, dynos, overhangs, etc. (can be comma-separated for multiple styles)
  holdType: varchar("hold_type"), // crimps, slopers, pinches, jugs, etc.
  wallAngle: varchar("wall_angle"), // overhang, vertical, slab
  completed: boolean("completed").default(false),
  attempts: integer("attempts").default(1),
  xpEarned: integer("xp_earned").default(0), // XP earned from this problem
  notes: text("notes"),
  skillsGained: jsonb("skills_gained").default('{}'), // Track which skills were practiced
  createdAt: timestamp("created_at").defaultNow(),
});

// Quests based on Abyss layers
export const quests = pgTable("quests", {
  id: serial("id").primaryKey(),
  userId: varchar("user_id").references(() => users.id).notNull(),
  title: varchar("title").notNull(),
  description: text("description").notNull(),
  layer: integer("layer").notNull(), // 1-7
  difficulty: varchar("difficulty").notNull(),
  difficultyRating: integer("difficulty_rating").default(1), // 1-10 numeric rating
  xpReward: integer("xp_reward").notNull(),
  requirements: jsonb("requirements").notNull(), // JSON object with quest requirements
  status: varchar("status").default("active"), // active, completed, failed, discarded, expired
  progress: integer("progress").default(0),
  maxProgress: integer("max_progress").notNull(),
  questType: varchar("quest_type").default("daily"), // daily, weekly, layer
  generatedByAi: boolean("generated_by_ai").default(true),
  autoGenerated: boolean("auto_generated").default(false), // For automatic quest generation
  expiresAt: timestamp("expires_at"),
  completedAt: timestamp("completed_at"),
  createdAt: timestamp("created_at").defaultNow(),
});

// User achievements and milestones
// Skills table for tracking climbing abilities (hierarchical tree structure)
export const skills = pgTable("skills", {
  id: serial("id").primaryKey(),
  userId: varchar("user_id").references(() => users.id).notNull(),
  mainCategory: varchar("main_category").notNull(), // Movement, Strength, Mental, Technical, Endurance, Strategy
  subCategory: varchar("sub_category").notNull(), // Balance, Coordination, etc.
  skillType: varchar("skill_type").notNull(), // dynos, crimps, slabs, overhangs, etc.
  maxGrade: varchar("max_grade").default("V0"), // Highest grade achieved in this skill
  level: integer("level").default(1), // 1-10 skill level
  xp: integer("xp").default(0), // XP in this specific skill
  totalProblems: integer("total_problems").default(0),
  bestSession: integer("best_session").default(0), // Reference to session with best performance
  createdAt: timestamp("created_at").defaultNow(),
  updatedAt: timestamp("updated_at").defaultNow(),
});

export const achievements = pgTable("achievements", {
  id: serial("id").primaryKey(),
  userId: varchar("user_id").references(() => users.id).notNull(),
  achievementId: varchar("achievement_id").notNull(), // unique identifier for achievement type
  type: varchar("type").notNull(), // quest, session, skill, progression, etc.
  title: varchar("title").notNull(),
  description: text("description"),
  icon: varchar("icon").default("trophy"), // Font Awesome icon name
  category: varchar("category").notNull(), // Explorer, Climber, Master, etc.
  xpReward: integer("xp_reward").default(0),
  isUnlocked: boolean("is_unlocked").default(true),
  unlockedAt: timestamp("unlocked_at").defaultNow(),
  createdAt: timestamp("created_at").defaultNow(),
});

// Home workout sessions
export const workoutSessions = pgTable("workout_sessions", {
  id: serial("id").primaryKey(),
  userId: varchar("user_id").references(() => users.id).notNull(),
  workoutType: varchar("workout_type").notNull(), // 'stretching', 'meditation', 'strength', 'combo'
  title: varchar("title").notNull(),
  description: text("description"),
  duration: integer("duration").notNull(), // in minutes
  intensity: varchar("intensity").notNull(), // 'low', 'medium', 'high', 'extreme'
  intensityRating: integer("intensity_rating").default(1), // 1-10 numeric rating
  targetAreas: jsonb("target_areas").default('[]'), // ['flexibility', 'core', 'shoulders', 'mental_focus']
  exercises: jsonb("exercises").default('[]'), // Array of exercise objects
  xpEarned: integer("xp_earned").default(0),
  completed: boolean("completed").default(false),
  aiGenerated: boolean("ai_generated").default(true),
  generationReason: text("generation_reason"), // Why this workout was suggested
  startTime: timestamp("start_time").defaultNow(),
  completedAt: timestamp("completed_at"),
  createdAt: timestamp("created_at").defaultNow(),
});

// Relations
export const usersRelations = relations(users, ({ many }) => ({
  sessions: many(climbingSessions),
  quests: many(quests),
  achievements: many(achievements),
  skills: many(skills),
  workouts: many(workoutSessions),
  layerQuests: many(layerQuests),
  nanachiMemories: many(nanachiMemories),
}));

export const climbingSessionsRelations = relations(climbingSessions, ({ one, many }) => ({
  user: one(users, { fields: [climbingSessions.userId], references: [users.id] }),
  problems: many(boulderProblems),
}));

export const boulderProblemsRelations = relations(boulderProblems, ({ one }) => ({
  session: one(climbingSessions, { fields: [boulderProblems.sessionId], references: [climbingSessions.id] }),
}));

export const questsRelations = relations(quests, ({ one }) => ({
  user: one(users, { fields: [quests.userId], references: [users.id] }),
}));

export const skillsRelations = relations(skills, ({ one }) => ({
  user: one(users, { fields: [skills.userId], references: [users.id] }),
}));

export const achievementsRelations = relations(achievements, ({ one }) => ({
  user: one(users, { fields: [achievements.userId], references: [users.id] }),
}));

export const workoutSessionsRelations = relations(workoutSessions, ({ one }) => ({
  user: one(users, { fields: [workoutSessions.userId], references: [users.id] }),
}));

// Layer quests - one per layer that must be completed to progress
export const layerQuests = pgTable("layer_quests", {
  id: serial("id").primaryKey(),
  userId: varchar("user_id").references(() => users.id).notNull(),
  layer: integer("layer").notNull(), // 1-7 for each layer
  title: varchar("title").notNull(),
  description: text("description").notNull(),
  xpReward: integer("xp_reward").default(0),
  completed: boolean("completed").default(false),
  progress: integer("progress").default(0),
  maxProgress: integer("max_progress").default(1),
  createdAt: timestamp("created_at").defaultNow(),
  completedAt: timestamp("completed_at"),
});

export const layerQuestsRelations = relations(layerQuests, ({ one }) => ({
  user: one(users, { fields: [layerQuests.userId], references: [users.id] }),
}));

// Insert schemas
export const insertUserSchema = createInsertSchema(users);
export const insertClimbingSessionSchema = createInsertSchema(climbingSessions, {
  startTime: z.coerce.date(),
  endTime: z.coerce.date().optional(),
});
export const insertBoulderProblemSchema = createInsertSchema(boulderProblems);
export const insertQuestSchema = createInsertSchema(quests);
export const insertSkillSchema = createInsertSchema(skills);
export const insertAchievementSchema = createInsertSchema(achievements);
export const insertWorkoutSessionSchema = createInsertSchema(workoutSessions);

// Types
export type UpsertUser = typeof users.$inferInsert;
export type User = typeof users.$inferSelect;
export type InsertClimbingSession = z.infer<typeof insertClimbingSessionSchema>;
export type ClimbingSession = typeof climbingSessions.$inferSelect;
export type InsertBoulderProblem = z.infer<typeof insertBoulderProblemSchema>;
export type BoulderProblem = typeof boulderProblems.$inferSelect;
export type InsertQuest = z.infer<typeof insertQuestSchema>;
export type Quest = typeof quests.$inferSelect;
export type InsertSkill = z.infer<typeof insertSkillSchema>;
export type Skill = typeof skills.$inferSelect;
export type InsertAchievement = z.infer<typeof insertAchievementSchema>;
export type Achievement = typeof achievements.$inferSelect;
export type InsertWorkoutSession = z.infer<typeof insertWorkoutSessionSchema>;
export type WorkoutSession = typeof workoutSessions.$inferSelect;

export const insertLayerQuestSchema = createInsertSchema(layerQuests);
export type InsertLayerQuest = z.infer<typeof insertLayerQuestSchema>;
export type LayerQuest = typeof layerQuests.$inferSelect;

// Nanachi Memory System
export const nanachiMemories = pgTable("nanachi_memories", {
  id: serial("id").primaryKey(),
  userId: varchar("user_id").notNull(),
  memoryType: varchar("memory_type").notNull(), // 'conversation', 'preference', 'achievement', 'goal'
  title: varchar("title").notNull(),
  content: text("content").notNull(),
  context: jsonb("context"), // Additional structured data
  importance: integer("importance").default(1), // 1-5 scale
  createdAt: timestamp("created_at").defaultNow(),
  updatedAt: timestamp("updated_at").defaultNow(),
  expiresAt: timestamp("expires_at"), // Optional expiration for temporary memories
});

export const nanachiMemoriesRelations = relations(nanachiMemories, ({ one }) => ({
  user: one(users, { fields: [nanachiMemories.userId], references: [users.id] }),
}));

export const insertNanachiMemorySchema = createInsertSchema(nanachiMemories);
export type InsertNanachiMemory = z.infer<typeof insertNanachiMemorySchema>;
export type NanachiMemory = typeof nanachiMemories.$inferSelect;

// Nutrition Tracking System
export const nutritionEntries = pgTable("nutrition_entries", {
  id: serial("id").primaryKey(),
  userId: varchar("user_id").notNull(),
  foodName: varchar("food_name").notNull(),
  brand: varchar("brand"),
  servingSize: varchar("serving_size").notNull(),
  servingWeight: integer("serving_weight"), // in grams
  calories: integer("calories").notNull(),
  protein: decimal("protein").notNull(), // in grams
  carbs: decimal("carbs").notNull(), // in grams
  fat: decimal("fat").notNull(), // in grams
  fiber: decimal("fiber").default('0'),
  sugar: decimal("sugar").default('0'),
  sodium: integer("sodium").default(0), // in mg
  imageUrl: varchar("image_url"),
  scanData: jsonb("scan_data"), // Store AI analysis from scanning
  mealType: varchar("meal_type").notNull(), // breakfast, lunch, dinner, snack
  consumedAt: timestamp("consumed_at").defaultNow(),
  createdAt: timestamp("created_at").defaultNow(),
});

export const nutritionGoals = pgTable("nutrition_goals", {
  id: serial("id").primaryKey(),
  userId: varchar("user_id").notNull(),
  goalType: varchar("goal_type").notNull(), // weight_loss, muscle_gain, maintenance, performance
  activityLevel: varchar("activity_level").notNull(), // sedentary, light, moderate, heavy, extreme
  currentWeight: integer("current_weight"), // in kg
  targetWeight: integer("target_weight"), // in kg
  height: integer("height"), // in cm
  age: integer("age"),
  gender: varchar("gender"),
  dailyCalories: integer("daily_calories").notNull(),
  dailyProtein: decimal("daily_protein").notNull(),
  dailyCarbs: decimal("daily_carbs").notNull(),
  dailyFat: decimal("daily_fat").notNull(),
  // Chat-based goals and preferences
  chatGoals: text("chat_goals"), // JSON string of goals discussed in chat
  personalizedInsights: text("personalized_insights"), // Nanachi's insights based on chat
  climbingContext: text("climbing_context"), // Climbing-specific context from chat
  dietaryPreferences: text("dietary_preferences"), // Dietary restrictions/preferences
  createdAt: timestamp("created_at").defaultNow(),
  updatedAt: timestamp("updated_at").defaultNow(),
});

export const nutritionRecommendations = pgTable("nutrition_recommendations", {
  id: serial("id").primaryKey(),
  userId: varchar("user_id").notNull(),
  recommendationType: varchar("recommendation_type").notNull(), // meal_plan, supplement, timing, hydration
  title: varchar("title").notNull(),
  description: text("description").notNull(),
  priority: integer("priority").default(1), // 1-5 scale
  nanachiPersonality: text("nanachi_personality"), // Nanachi's personality-driven explanation
  isActive: boolean("is_active").default(true),
  createdAt: timestamp("created_at").defaultNow(),
  expiresAt: timestamp("expires_at"),
});

// Relations
export const nutritionEntriesRelations = relations(nutritionEntries, ({ one }) => ({
  user: one(users, { fields: [nutritionEntries.userId], references: [users.id] }),
}));

export const nutritionGoalsRelations = relations(nutritionGoals, ({ one }) => ({
  user: one(users, { fields: [nutritionGoals.userId], references: [users.id] }),
}));

export const nutritionRecommendationsRelations = relations(nutritionRecommendations, ({ one }) => ({
  user: one(users, { fields: [nutritionRecommendations.userId], references: [users.id] }),
}));

// Insert schemas
export const insertNutritionEntrySchema = createInsertSchema(nutritionEntries);
export const insertNutritionGoalSchema = createInsertSchema(nutritionGoals);
export const insertNutritionRecommendationSchema = createInsertSchema(nutritionRecommendations);

// Types
export type InsertNutritionEntry = z.infer<typeof insertNutritionEntrySchema>;
export type NutritionEntry = typeof nutritionEntries.$inferSelect;
export type InsertNutritionGoal = z.infer<typeof insertNutritionGoalSchema>;
export type NutritionGoal = typeof nutritionGoals.$inferSelect;
export type InsertNutritionRecommendation = z.infer<typeof insertNutritionRecommendationSchema>;
export type NutritionRecommendation = typeof nutritionRecommendations.$inferSelect;
